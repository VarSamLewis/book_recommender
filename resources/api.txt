
Developer Center → APIs
Open Library offers a suite of APIs to help developers get up and running with our data. This includes RESTful APIs, which make Open Library data availabile in JSON, YAML and RDF/XML formats. There's also an earlier, now deprecated JSON API which is preserved for backward compatibility.

Try out our interactive OpenAPI sandbox!

Identifying your Application
If your application will make regular, frequent use of Open Library's APIs (e.g. multiple calls per minute), please add a HEADER that specifies a User-Agent string with (a) the name of your application and (b) your contact email or phone number, so we may contact you when we notice high request volume. Failing to include these headers may result in your application being blocked.

For help adding user-agent headers to your API calls, please refer to this javascript and python example.

Additional rate limit information can be accessed here.

Index of APIs
Book Search API - Search results for books, authors, and more
Work & Edition APIs - Retrieve a specific work or edition by identifier
My Books API - Retrieve books on a patron's public reading log
Authors API - Retrieve an author and their works by author identifier
Subjects API - Fetch books by subject name
Search inside API - Search for matching text within millions of books
Partner API -- Formerly the "Read" API, fetch one or more books by library identifiers (ISBNs, OCLC, LCCNs)
Covers API - Fetch book covers by ISBN or Open Library identifier
Recent Changes API - Programatic access to changes across Open Library
Lists API - Reading, modifying, or creating user lists
History of an item can be accessed by appending ?m=history to the page like this.
Bulk Access
Please do not use our APIs for bulk download of Open Library data because this affects our ability to serve patrons. We make our data publicly available each month for partners. If you want a dump of complete data, please read about our Bulk Download options, or email us at openlibrary@archive.org.

More APIs
Did you know, nearly every page on Open Library is or has an API. You can return structured bibliographic data for any page by adding a .rdf/.json/.yml extension to the end of any Open Library identifier. For instance: https://openlibrary.org/works/OL15626917W.json or https://openlibrary.org/authors/OL33421A.json. Many pages, such as the Books, Authors, and Lists, will include links to their RDF and JSON formats.

Questions
We encourage developers to ask questions by opening issues on GitHub and on our gitter chat channel.



Friends using Open Library APIs
Several developers are creating amazing things with the Open Library APIs:

Trove by the National Library of Australia
Trove is a new discovery experience focused on Australia and Australians. It supplements what search engines provide with reliable information from Australia's memory institutions. The system hits Open Library when public domain books turn up in searches, and displays links to Open Library.

Koha
Koha is an open source library system for public libraries that includes catalog searches and member organizing. It uses Open Library covers, displays OL related subjects, and lendable eBooks using the Read API.

Evergreen
Evergreen is highly-scalable software for libraries that helps library patrons find library materials, and helps libraries manage, catalog, and circulate those materials. It uses Open Library for covers, tables of contents, with plans to expand into other areas.

read.gov by the Library of Congress
OK, this isn't exactly Open Library, but it's still awesome! The Library of Congress have modified the Internet Archive's Book Reader to sit perfectly within their Rare Books Collection site.

OpenBook WordPress Plug-in by John Miedema
OpenBook is useful for anyone who wants to add book covers and other book data on a WordPress website. OpenBook links to detailed book information in Open Library, the main data source, as well as other book sites. Users have complete control over the display through templates. OpenBook can link to library records by configuring an OpenURL resolver or through a WorldCat link. OpenBook inserts COinS so that other applications like Zotero can pick up the book data.

Umlaut by Jason Ronallo
Umlaut is a middle-tier OpenURL link resolver that adds functions and services to commercial link resolving software.

Virtual Shelf by Jonathan Breitbart and Devin Blong (UC Berkeley School of Information)
The Virtual Shelf is a visualization created by two students at the UC Berkeley School of Information. The project includes the student's master thesis, with research into the searching and browsing patterns of library patrons. The Open Library RESTful API was utilized during the project as a source of metadata for the user interface.

RDC UI Toolkit by Rural Design Collective
This group created a suite of tools that facilitates the creation of localized user interfaces for public domain books. The RDC used the Open Library Covers API and the Internet Archive Book Reader in their online demonstration customized for the OLPC XO.

Dreambooks.club by Bernat Fortet
Dreambooks is a portal and community where parents and children can discover new books to read together. Think of it as the online equivalent of your library's children's corner. All the book data is powered by OpenLibary's API.

MyBooks.Life by Mark Webster
MyBooks.Life is an android app and website designed primarily to manage TBR (to-be-read) lists. You can keep track of your reading progress, make notes, manage your wishlist, and rate your books. MyBooks.Life uses Open Library data to power its search.

Bookmind
Bookmind is now available at https://apps.apple.com/app/bookmind/id6593662584. It uses open library’s api exclusively for book data. You can even see the rough prototype source at https://github.com/dave-ruest/Bookmind.

Hobbyverse let's you track all your hobbies in one place. Users can add their books to their digital library and track their progress reading books, view what books their friends are reading, earn achievements, etc.

ReadOtter
ReadOtter, a classroom library management app designed to help teachers organize their classroom libraries.

Chapter
Chapter is an online reading library and reading organizer app.

Land of Readers is a free, easy-to-use book discovery tool designed to help readers find books that match their interests, age group, and reading level.

Austen is a web app that uses the Open Library API to generate visual character relationship diagrams for books using AI. Here is a live demo of their work.

Are you using the Open Library APIs? We'd love to hear about it! Please email us at openlibrary@archive.org.

Search API
Developer Center → APIs → Search API
URL: https://openlibrary.org/search.json

Parameter	Description
q	The solr query. See Search HowTo for sample queries
fields	The fields to get back from solr. The special value * may be provided to fetch all fields (however this will result in an expensive response, please use sparingly).
To fetch availability data from archive.org, add the special value, availability. Example: /search.json?q=harry%20potter&fields=*,availability&limit=1. This will fetch the availability data of the first item in the `ia` field.
sort	You can sort the results by various facets such as new, old, random, or key (which sorts as a string, not as the number stored in the string). For a complete list of sorts facets look here (this link goes to a specific commit, be sure to look at the latest one for changes). The default is to sort by relevance.
lang	The users language as a two letter (ISO 639-1) language code. This influences but doesn't exclude search results. For example setting this to fr will prefer/display the French edition of a given work, but will still match works that don't have French editions. Adding language:fre on the other hand to the search query will exclude results that don't have a French edition.
offset / limit	Use for pagination.
page / limit	Use for pagination, with limit corresponding to the page size. Note page starts at 1.
Overview
The Open Library Search API is one of the most convenient and complete ways to retrieve book data on Open Library. The API:

Is able to return data for multiple books in a single request/response
Returns both Work level information about the book (like author info, first publish year, etc), as well as Edition level information (like title, identifiers, covers, etc)
Author IDs are returned which you can use to fetch the author's image, if available
Options are available to return Book Availability along with the response.
Powerful sorting options are available, such as star ratings, publication date, and number of editions.
Examples
The URL format for API is simple. Take the search URL and add .json to the end. Eg:

https://openlibrary.org/search.json?q=the+lord+of+the+rings
https://openlibrary.org/search.json?title=the+lord+of+the+rings
https://openlibrary.org/search.json?author=tolkien&sort=new
https://openlibrary.org/search.json?q=the+lord+of+the+rings&page=2
https://openlibrary.org/search/authors.json?q=twain
Using Thing IDs to get Images
You can use the olid (Open Library ID) for authors and books to fetch covers by olid, e.g.:
https://covers.openlibrary.org/a/olid/OL23919A-M.jpg

Response Format
The response with be of the following format.

{
    "start": 0,
    "num_found": 629,
    "docs": [
        {...},
        {...},
        ...
        {...}]
}
Each document specified listed in "docs" will be of the following format:

{
    "cover_i": 258027,
    "has_fulltext": true,
    "edition_count": 120,
    "title": "The Lord of the Rings",
    "author_name": [
        "J. R. R. Tolkien"
    ],
    "first_publish_year": 1954,
    "key": "OL27448W",
    "ia": [
        "returnofking00tolk_1",
        "lordofrings00tolk_1",
        "lordofrings00tolk_0",
    ],
    "author_key": [
        "OL26320A"
    ],
    "public_scan_b": true
}
The fields in the doc are described by Solr schema which can be found here:
https://github.com/internetarchive/openlibrary/blob/b4afa14b0981ae1785c26c71908af99b879fa975/openlibrary/plugins/worksearch/schemes/works.py#L38-L91

The schema is not guaranteed to be stable, but most common fields (e.g. title, IA ids, etc) should be safe to depend on.

Getting edition information
By default, the search endpoint returns works instead of editions. A work is a collection of editions; for example there is only one work for The Wonderful Wizard of Oz (OL18417W), but there are 1029 editions, over many languages! Sometimes you might want to fetch data about editions as well as works. That is what the editions field is for:

https://openlibrary.org/search.json?q=crime+and+punishment&fields=key,title,author_name,editions

{
    "numFound": 2421,
    "start": 0,
    "numFoundExact": true,
    "docs": [
        {
            "key": "/works/OL166894W",
            "title": "Преступление и наказание",
            "author_name": ["Фёдор Михайлович Достоевский"],
            "editions": {
                "numFound": 290,
                "start": 0,
                "numFoundExact": true,
                "docs": [
                    {
                        "key": "/books/OL37239326M",
                        "title": "Crime and Punishment"
                    }
                ]
            }
        },
    ...
The editions sub-object contains the editions of this work that match the user's query (here, "crime and punishment"), sorted so the best (i.e. most relevant) is at the top. Matching editions are first selected by forwarding any search fields in the query that apply to editions (e.g. publisher, language, ebook_access, has_fulltext, etc). Any un-fielded search terms (e.g. "crime and punishment", above) are also applied, but are not require to all match.

From these, relevance is further determined by boosting books that (1) match the user's language, (2) are readable, (3) have a cover.

You can see this in action in the search UI as well. Consider the following searches:

"sherlock holmes" - The first work is OL262463W, with the edition displayed Memoirs of Sherlock Holmes (OL7058607M). This edition was selected because it matched the user's query, and it matched the user's language (my language is English), and because it was readable.
"sherlock holmes language:fre" - The same work is displayed as above, but now the displayed edition is Souvenirs sur Sherlock Holmes (OL8887270M), selected because the user's query requires a book in French.
"sherlock holmes" for a French user - By setting lang=fr in the URL, we can simulate the website as it would appear for a French user. This information is used to influence the results again, and the displayed edition is Souvenirs sur Sherlock Holmes (OL8887270M) since this matches the user's language.
"souvenirs sur sherlock holmes" - Here as an English user, I search by the French title. So again I will see the same work as always, but the displayed edition will now also be Souvenirs sur Sherlock Holmes (OL8887270M) since this best matches the user's query.
In the API, you can also fetch fields from editions separately from those on the work, like so:

https://openlibrary.org/search.json?q=crime+and+punishment&fields=key,title,author_name,editions,editions.key,editions.title,editions.ebook_access,editions.language

{
    "numFound": 2421,
    "start": 0,
    "numFoundExact": true,
    "docs": [
        {
            "key": "/works/OL166894W",
            "title": "Преступление и наказание",
            "author_name": ["Фёдор Михайлович Достоевский"],
            "editions": {
                "numFound": 290,
                "start": 0,
                "numFoundExact": true,
                "docs": [
                    {
                        "key": "/books/OL37239326M",
                        "title": "Crime and Punishment",
                        "language": [
                            "eng"
                        ],
                        "ebook_access": "public"
                    }
                ]
            }
        },
    ...
Notes:
- Currently only one edition is displayed ; we are planning to add support for pagination so you can specify editions.row or editions.start.
- You can add &editions.sort to override the default relevance logic and instead sort by a specific field.
- You can see the exact boosting logic in the code here: https://github.com/internetarchive/openlibrary/blob/dc49fddb78a3cb25138922790ddd6a5dd2b5741c/openlibrary/plugins/worksearch/schemes/works.py#L439-L448

Developer Center / APIs / Authors API
Searching for Authors
You can search for authors using the https://openlibrary.org/search/authors.json search API which accepts q as a query parameter:

https://openlibrary.org/search/authors.json?q=j%20k%20rowling

{
  numFound: 1,
  start: 0,
  numFoundExact: true,
  docs: [
    {
      key: "OL23919A",
      text: [...],
      type: "author",
      name: "J. K. Rowling",
      alternate_names: [...],
      birth_date: "31 July 1965",
      top_work: "Harry Potter and the Philosopher's Stone",
      work_count: 162,
      top_subjects: [...],
      _version_: 1702166143068799000
    },
  ]
}
Data on Individual Authors
Once you have the identifier key of an author of interest, e.g. /authors/OL23919A, you can fetch their complete data by visiting their Author page as .json, .rdf, .yml:

e.g. https://openlibrary.org/authors/OL23919A.json

Batch Requests
Currently, we do not have a way to get the full data for multiple authors in one request. However, you can get a subset (name, subjects, ratings, and more) by using the search API with a query like key:(/authors/OL3874685A OR /authors/OL1394244A). Example search and example API call.

Works by an Author
https://openlibrary.org/authors/OL23919A/works.json

The above URL will return 50 works by an author.

You can append ?limit=1000 to return the first 1000 works by an author like so:
https://openlibrary.org/authors/OL1394244A/works.json?limit=100

If you want to paginate, you can set offset like so:
https://openlibrary.org/authors/OL1394244A/works.json?offset=50

Subjects API
This API is experimental. Please be aware that this may change in future.
Get works of a subject
Sample Request:

GET /subjects/love.json
Sample Response:

{
    "key": "/subjects/love",
    "name": "love"
    "subject_type": "subject",
    "work_count": 4918,
    "works": [
        {
            "key": "/works/OL66534W",
            "title": "Pride and prejudice",
            "edition_count": 752,
            "authors": [
                {
                    "name": "Jane Austen",
                    "key": "/authors/OL21594A"
                }
            ],
            "has_fulltext": true,
            "ia": "mansfieldparknov03aust",
            ...
        },
        ...
    ]
}
All details of a subject
When query parameter details=true is passed, related subjects, prominent publishers, prolific authors and publishing_history are also included in the response.

Sample Request:

GET /subjects/love.json?details=true
Sample Response:

{
    "key": "/subjects/love",
    "name": "Love",
    "subject_type": "subject",
    "work_count": 4918,
    "ebook_count": 497,
    "works": [
        {
            "key": "/works/OL66534W",
            "title": "Pride and prejudice",
            "edition_count": 752,
            "authors": [
                {
                    "name": "Jane Austen",
                    "key": "/authors/OL21594A"
                }
            ],
            "has_fulltext": true,
            "ia": "mansfieldparknov03aust",
            ...
        },
        ...
    ],
    "authors": [
        {
            "count": 28,
            "name": "Plato",
            "key": "/authors/OL12823A"
        },
        {
            "count": 21,
            "name": "Ruoquan Wu",
            "key": "/authors/OL5638565A"
        },
        ...
    ],
    "publishers": [
        {
            "count": 54,
            "name": "Sine nomine"
        },
        {
            "count": 44,
            "name": "Bantam Books"
        },
        ...
    ],
    "subjects": [
        {
            "count": 914,
            "name": "Religious aspects of Love",
            "key": "/subjects/religious_aspects_of_love"
        },
        {
            "count": 887,
            "name": "Christianity",
            "key": "/subjects/christianity"
        },
        ...
    ],
    "people": [
        {
            "count": 44,
            "name": "Jesus Christ",
            "key": "/subjects/person:jesus_christ"
        },
        {
            "count": 42,
            "name": "Plato",
            "key": "/subjects/person:plato"
        },
        ...
    ],
    "places": [
        {
            "count": 80,
            "name": "United States",
            "key": "/subjects/place:united_states"
        },
        {
            "count": 36,
            "name": "France",
            "key": "/subjects/place:france"
        },
        ...
    ],
    "times": [
        {
            "count": 54,
            "name": "20th century",
            "key": "/subjects/time:20th_century"
        },
        ...
    ]
    "publishing_history": [
        [1492, 2],
        [1494, 1],
        ...,
        [2009, 119],
        [2010, 56]
    ]
}
Supported Query Parameters
details: When details=true is passed, related subjects, prominent publishers, prolific authors and publishing_history is also included in the response.

ebooks: When ebooks=true is passed, only the works which have an e-book are included in the response.

published_in: Support for filter on published year range. For example:

http://openlibrary.org/subjects/love.json?published_in=1500-1600
limit: Number of works to include in the response.

offset: starting offset in the total works. Used for pagination.

Search inside individual book API
WARNING: This is an experimental API and can change in future.

Here is an example of searching inside a book using the searching within a book using the API.

This API is based on changing datanode hosts (i.e. an archive.org item's files live on data hosts which can change). To find the data node host of an item, go to archive.org/metadata/{identifier} and change the prefix ia800204 to the value of d1 or d2 accordingly. The path variable in the url may also have to change to dir value within the metadata:

https://ia800204.us.archive.org/fulltext/inside.php?item_id=designevaluation25clin&doc=designevaluation25clin&path=/27/items/designevaluation25clin&q=%22library%20science%22

Information you need to search inside a book, with an example from the above search:

hostname: ia800204.us.archive.org (host where the book is stored)
item_id: designevaluation25clin (archive.org item ID)
doc: designevaluation25clin (most times this is the same as the item_id)
path: /27/items/designevaluation25clin (path of the book on this host)
q: "library science" (phrase to search for)
callback: reply (optional callback for JSONP)
You can find the hostname and path using the archive.org locator service.

Example of output from API call:

reply( {
    "ia": "designevaluation25clin",
    "q": "\"library science\"",
    "page_count": 224,
    "body_length": 475677,
    "leaf0_missing": true,
    "matches": [
       ...
    ]
} )
The reply includes page count, this is the number of pages that were passed to the OCR.

Example of a match:

{
    "text": "The first Clinic on Library Applications of Data Processing was held at the Illini Union on the Urbana-Champaign campus of the University of Illinois, April 28 - May 1, 1963 under the sponsorship of the University of Illinois Graduate School of {{{Library}}} {{{Science}}}. Writing in the Foreword to the Clinic proceedings, Herbert Goldhor (1964) provides the rationale for sponsoring such a Clinic:",
    "par": [
        {
            "page": 14, "page_width": 2134, "page_height": 3328,
            "b": 1090, "t": 700, "r": 2024, "l": 192,
            "boxes": [
                { "r": 1560, "b": 957, "t": 899, "l": 1378 },
                { "r": 1767, "b": 957, "t": 899, "l": 1587 }
            ]
        }
    ]
}
Each match contains a 'text' field. This is usually a complete paragraph. The matched words are surrounded by three braces either side, like {{{this}}}.

The other field is called par, it contains details of every page that is part of this match. Paragraphs can cross pages. Each par object provides a page number, page width, height, and coordinates for the paragraph on the page. The boxes field field lists the coordinates to draw around each word or part of word in the match.

Hyphenation means words can break across lines and across pages.
